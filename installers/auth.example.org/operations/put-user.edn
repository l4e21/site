{:deps
 ["https://auth.example.org/operations/get-user"
  "https://auth.example.org/scopes/system/write"]
 :install
 {:juxt.site/subject-id "https://auth.example.org/_site/subjects/system"
  :juxt.site/operation-id "https://auth.example.org/_site/operations/create-operation"
  :juxt.site/input
  {:xt/id "{{$id}}"
   :juxt.site/etag-generate {:juxt.site.sci/program
                              #juxt.pprint
                              "\"example\""}

   :juxt.site.malli/input-schema
   [:map
    [:username :string #_[:re (re-pattern "[a-z]{3,}")]]]

   :juxt.site/prepare
   {:juxt.site.sci/program
    #juxt.pprint
    (let [content-type (-> *ctx*
                           :juxt.site/received-representation
                           :juxt.http/content-type)
          body (-> *ctx*
                   :juxt.site/received-representation
                   :juxt.http/body)

          edn (case content-type
                "application/edn"
                (some->
                 body
                 (String.)
                 clojure.edn/read-string)

                "application/json"
                (some->
                 body
                 (String.)
                 jsonista.core/read-value-with-keywords))

          _ (assert edn)

          _ (juxt.site.malli/validate-input edn)

          username (:username edn)

          _ (log/info (str "username is " username))

          id (format "https://data.example.org/_site/users/%s" username)]

      (assoc edn :xt/id id))}

   :juxt.site/transact
   {:juxt.site.sci/program
    #juxt.pprint
    (let [edn *prepare*
          id (:xt/id edn)]

      (log/info (str "edn is " edn))

      ;; TODO: Ensure id doesn't already exist

      [[:xtdb.api/put
        (assoc
         edn
         :juxt.site/type "https://meta.juxt.site/types/user"
         :juxt.site/methods
         {:get {:juxt.site/operation "https://auth.example.org/operations/get-user"}}
         :juxt.site/protection-spaces #{"https://auth.example.org/protection-spaces/bearer"}

         :juxt.site/access-control-allow-origins
         [[".*" {:juxt.site/access-control-allow-origin "*"
                 :juxt.site/access-control-allow-methods [:get]
                 :juxt.site/access-control-allow-headers ["authorization"]}]]

         ;; It's nice to be able to access this resource via a browser
         ;;:juxt.site/session-scope "{{session-scope}}"
         )]

       ;; JSON version
       [:xtdb.api/put
        {:xt/id (str id ".json")
         :juxt.site/variant-of id
         :juxt.http/content-type "application/json"
         :juxt.site/methods
         {:get {:juxt.site/operation "https://auth.example.org/operations/get-user"}}
         :juxt.site/protection-spaces #{"https://auth.example.org/protection-spaces/bearer"}
         :juxt.site/access-control-allow-origins
         [[".*" {:juxt.site/access-control-allow-origin "*"
                 :juxt.site/access-control-allow-methods [:get]
                 :juxt.site/access-control-allow-headers ["authorization"]}]]

         ;; It's nice to be able to access this resource via a browser
         ;;:juxt.site/session-scope "{{session-scope}}"

         :juxt.site/respond
         {:juxt.site.sci/program
          #juxt.pprint
          (let [content (str (jsonista.core/write-value-as-string *state*) "\r\n")]
            (-> *ctx*
                (assoc :ring.response/body content)
                (update :ring.response/headers assoc "content-length" (str (count (.getBytes content))))))}}]

       ;; EDN version
       [:xtdb.api/put
        {:xt/id (str id ".edn")
         :juxt.site/variant-of id
         :juxt.http/content-type "application/edn"
         :juxt.site/methods
         {:get {:juxt.site/operation "https://auth.example.org/operations/get-user"}}
         :juxt.site/protection-spaces #{"https://auth.example.org/protection-spaces/bearer"}
         :juxt.site/access-control-allow-origins
         [[".*" {:juxt.site/access-control-allow-origin "*"
                 :juxt.site/access-control-allow-methods [:get]
                 :juxt.site/access-control-allow-headers ["authorization"]}]]

         :juxt.site/respond
         {:juxt.site.sci/program
          #juxt.pprint
          (let [content (pr-str *state*)]
            (-> *ctx*
                (assoc :ring.response/body content)
                (update :ring.response/headers assoc "content-length" (str (count (.getBytes content))))))}}]
       ])}

   :juxt.site/scope
   #{"https://auth.example.org/scopes/system/write"}

   :juxt.site/rules
   [
    [(allowed? subject operation resource permission)
     [permission :juxt.site/subject subject]]

    [(allowed? subject operation resource permission)
     [subject :juxt.site/user-identity id]
     [id :juxt.site/user user]
     [permission :juxt.site/role role]
     [role :juxt.site/type "https://auth.example.org/_site/types/role"]
     [role-assignment :juxt.site/type "https://meta.juxt.site/types/role-assignment"]
     [role-assignment :juxt.site/role role]
     [role-assignment :juxt.site/user user]]

    [(allowed? subject operation resource permission)
     [subject :juxt.site/application app]
     [permission :juxt.site/role role]
     [role :juxt.site/type "https://auth.example.org/_site/types/role"]
     [role-assignment :juxt.site/type "https://meta.juxt.site/types/role-assignment"]
     [role-assignment :juxt.site/role role]
     [role-assignment :juxt.site/application app]]]}}}
